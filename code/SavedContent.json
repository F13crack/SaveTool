{
    "colored text cmd (py)": "class bcolors:\r\n    HEADER = '\\033[95m'\r\n    OKBLUE = '\\033[94m'\r\n    OKCYAN = '\\033[96m'\r\n    OKGREEN = '\\033[92m'\r\n    WARNING = '\\033[93m'\r\n    FAIL = '\\033[91m'\r\n    ENDC = '\\033[0m'\r\n    BOLD = '\\033[1m'\r\n    UNDERLINE = '\\033[4m'\r\n\r\nprint(bcolors.______ + \"YOUR TEXT\" + bcolors.ENDC)",
    "get program running time": "linux:\ntime python3 <py-datei>",
    "create python shortcut (cmd)": "python.bat\n----------------------------\n@echo off\nC:Path\\to\\python.exe %*\n----------------------------\njetzt kann python via \"python .\\datei.py\" ausgef\u00fchrt werden",
    "pip": "Wenn pip installiert ist, aber nicht funktioniert:\npy -m pip install ...",
    "multiple input-lines (py)": "lines = []\r\nwhile True:\r\n    line = input()\r\n    if line:\r\n        lines.append(line)\r\n    else:\r\n        break\r\nnewContent = '\\n'.join(lines)",
    "emoticons": "o.O\n^_~\n^_^\n:)\n:D\n^0^\n:P\n;P\n:(\n:[\nU_U\n>:(\nO.O\nUwU\n^3^\nX_X\n:/\nT_T\nO_O\n+_+\n:O\n\u00ac_\u00ac\n;_;\n^_+\n;]\n=.=\n^.^\n:-3\n=)\n:|\n-.-\n*_*\n>_<\n8-)\nB-)\n-0-\n:S\n^^;\n-_-\n^^\n>.<\n> <\n^_-\n:'(\n=P\n\uff08\uffe3\ufe36\uffe3\uff09\u2197\u3000\n(\uffe3y\u25bd\uffe3)\u256d Ohohoho.....\n`(*>\ufe4f<*)\u2032\n(\uffe3o\uffe3) . z Z\n\\(\uffe3\ufe36\uffe3*\\))\n\u30fe(\u2022\u03c9\u2022`)o\n\u272a \u03c9 \u272a\n\ud83d\udc48(\uff9f\u30ee\uff9f\ud83d\udc48)\n(\u2310\u25a0_\u25a0)\n\u00af\\_(\u30c4)_/\u00af\n/_ \\\n\uff1e\ufe4f\uff1c\n\uff1e\ufe3f\uff1c\n(\u252c\u252c\ufe4f\u252c\u252c)\n\uffe3\u3078\uffe3\n\uff08\ufe36^\ufe36\uff09\n(\u256c\u2594\u76bf\u2594)\u256f\n\u30fd\uff08\u2267\u25a1\u2266\uff09\u30ce\n(\u25ba__\u25c4)\n(\u00ac_\u00ac\")\nw(\uff9f\u0414\uff9f)w\n\uff3c\uff08\u3007_\uff4f\uff09\uff0f\n(\u3002_\u3002) \n.______.",
    "clear cmd (py)": "os.system('cls')",
    "escape sequences (py)": "\\n = New line\n\\t = tab\n\\\\ = \\",
    "java": "I don't like it  (\u256c\u2594\u76bf\u2594)\u256f",
    "autocomplete (py)": "import json\r\nfrom prompt_toolkit import PromptSession\r\nfrom prompt_toolkit.completion import WordCompleter\r\n\r\n# Vorschl\u00e4ge aus JSON-Datei laden\r\ndef load_suggestions(file_path):\r\n    with open(file_path, 'r') as file:\r\n        return json.load(file)\r\n\r\ndef main():\r\n    # JSON-Datei mit Vorschl\u00e4gen laden\r\n    suggestions = load_suggestions('data.json')\r\n\r\n    # Erstellen eines Completer-Objekts\r\n    completer = WordCompleter(suggestions, ignore_case=True)\r\n\r\n    # PromptSession erstellen\r\n    session = PromptSession(completer=completer)\r\n\r\n    while True:\r\n        try:\r\n            user_input = session.prompt(\"Eingabe: \")\r\n            if user_input.lower() == 'exit':\r\n                break\r\n            print(f\"Sie haben eingegeben: {user_input}\")\r\n        except (EOFError, KeyboardInterrupt):\r\n            print(\"\\nBeendet.\")\r\n            break\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
    "tkinter nice GUI (py)": "from tkinter import *\r\nfrom tkinter import messagebox\r\n\r\ndef button_action():\r\n    print(\"Ich wurde \u00fcber das Men\u00fc ausgef\u00fchrt.\")\r\n\r\ndef action_get_info_dialog():\r\n    m_text = \"\\\r\n    ************************\\n\\\r\n    Autor: Hans Mustermann\\n\\\r\n    Date: 16.06.14\\n\\\r\n    Version: 1.07\\n\\\r\n    ************************\"\r\n    messagebox.showinfo(message=m_text, title = \"Infos\")\r\n\r\nfenster = Tk()\r\nfenster.title(\"Programm mit einem Men\u00fc\")\r\n\r\ninfo_text = Label(fenster, text = \"Ich habe ein Men\u00fc!\\n\\\r\nWenn du darauf Klickst geht ein Drop-Down-Men\u00fc auf.\")\r\ninfo_text.pack()\r\n\r\nmenuleiste = Menu(fenster)\r\n\r\ndatei_menu = Menu(menuleiste, tearoff=0)\r\nhelp_menu = Menu(menuleiste, tearoff=0)\r\n\r\ndatei_menu.add_command(label=\"Anwenden\", command=button_action)\r\ndatei_menu.add_separator() # F\u00fcgt eine Trennlinie hinzu\r\ndatei_menu.add_command(label=\"Exit\", command=fenster.quit)\r\n\r\nhelp_menu.add_command(label=\"Info!\", command=action_get_info_dialog)\r\n\r\nmenuleiste.add_cascade(label=\"Datei\", menu=datei_menu)\r\nmenuleiste.add_cascade(label=\"Help\", menu=help_menu)\r\n\r\n\r\nfenster.config(menu=menuleiste)        \r\nfenster.mainloop()\r\n ",
    "create cmd shortcuts (bat)": "1. create file\n\"<name>.bat\"\n2. code \n\"\n@echo off\npython \"C:\\Path\\to\\python\\file.py\" %*\n\"\n3. save and test by typing <name> (with or without .bat)"
}